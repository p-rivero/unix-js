@startuml Simplified class diagram

skinparam Ranksep 80

class FilesystemNode #aaffff {
    name: string
    accessType: hidden | locked | normal
    /absolutePath: string
    /isVisible: boolean
    /isReadable: boolean
}

class Directory #aaffff {
    getChildrenNames(): string[]
    getChild(name): FilesystemNode
}
FilesystemNode <|-- Directory

class RootDirectory #aaffff {
}
Directory <|-- RootDirectory 
RootDirectory --> RootDirectory : parent

Directory *-u-> "*" FilesystemNode : children
FilesystemNode --> "1" Directory : parent

class File #aaffff {
    permissions: read-only | read-write | execute
    read(): string
    write(content) / append(content)
    execute(processProxy): number
    handleSignal(processProxy, signal)
}
FilesystemNode <|-- File

class TextFile #aaffff {
    content: string
}
File <|-- TextFile

class BinaryFile #aaffff {
    executeFn: Executable
    handleSignalFn: SignalHandler
}
File <|-- BinaryFile

class DeviceFile #aaffff {
    onRead: ReadFn
    onWrite: WriteFn
}
File <|-- DeviceFile


class ExecutionContext {
    resolvePath(path): FilesystemNode
    changeDirectory(path)
    getFileStream(index): File
    setFileStream(index, file)
    createPipe(): [File, File]
}

ExecutionContext -u-> "*" File: fileStreams
ExecutionContext -u-> "1" RootDirectory: rootDirectory
ExecutionContext -u-> "1" Directory: homeDirectory
ExecutionContext -u-> "1" Directory: currentDirectory

class Process {
    pid: number
    ppid: number
    pgid: number
    start(args)
    waitToFinish()
    sendSignal(signal)
    
}
Process -u-> File : file
BinaryFile ..> ProcessProxy : "<<executable uses>>"
class ProcessTable {
    nextPid: number
    startProcess(context, file, args)
    waitToFinish(pid)
    sendSignal(pid, signal)
}
ProcessTable *--> "*" Process

' Process --> "1" ProcessTable: table

class ProcessProxy {
    pid = process.pid
    /stdin = context.getFileStream(0)
    /stdout = context.getFileStream(1)
    /stderr = context.getFileStream(2)
    resolvePath(path): FilesystemNode
    changeDirectory(path)
    execute(executable, args, background): number
    sendSignal(pid, signal)
}
ProcessProxy -u-> ExecutionContext : context
ProcessProxy --> Process : process
ProcessProxy --> ProcessTable : table
Process *-u-> ProcessProxy : proxy


class UnixShell {
    startupCommand: string
    startupCommandArgs: string[]
    start()
}
UnixShell -u-> ProcessTable : processTable
UnixShell .u.> ExecutionContext : <<initializes>>

@enduml
